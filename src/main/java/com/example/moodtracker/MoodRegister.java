package com.example.moodtracker;

import android.databinding.DataBindingUtil;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Toast;

import com.example.moodtracker.databinding.ActivityMoodRegisterBinding;


public class MoodRegister extends AppCompatActivity {

    // This variable stores the ID of the selected mood
    int mSelectedMood = 0;

    // The instance of the data binding class
    // A binding class is autogenerated for each layout file.
    ActivityMoodRegisterBinding mBinding;

    // This listener is notified when a mood icon is clicked
    View.OnClickListener mListener;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        mBinding = DataBindingUtil.setContentView(this, R.layout.activity_mood_register);

        // When a mood is clicked the UI shows an indicator around the selected mood icon
        mListener = new View.OnClickListener() {
            @Override
            public void onClick(View moodIcon) {

                // Check if any mood was selected previously and clean up before saving the new mood state
                if (mSelectedMood != 0) {
                    cleanUpSelectedMood();
                    mSelectedMood = 0;
                }

                // Save the selected mood and indicate the slected mood on the UI

                saveSelectedMood(moodIcon);

                //Todo: put mSelectedMood to savedInstanceState OR save in shared preferences here? (or both?)

                Toast.makeText(MoodRegister.this, "Selected mood ID: " + mSelectedMood, Toast.LENGTH_SHORT).show();

                return;
            }
        };

        mBinding.iconBad.setOnClickListener(mListener);
        mBinding.iconGood.setOnClickListener(mListener);
        mBinding.iconNeutral.setOnClickListener(mListener);
        mBinding.iconVeryBad.setOnClickListener(mListener);
        mBinding.iconVeryGood.setOnClickListener(mListener);

    }

    /**
     * This method cleans up the previously selected mood state
     * by making the selection-indicator view invisible.
     */
    private void cleanUpSelectedMood() {
        switch (mSelectedMood) {
            case MoodUtilities.BAD_MOOD_ID:
                mBinding.selectorBad.setVisibility(View.INVISIBLE);
                break;
            case MoodUtilities.GOOD_MOOD_ID:
                mBinding.selectorGood.setVisibility(View.INVISIBLE);
                break;
            case MoodUtilities.NEUTRAL_MOOD_ID:
                mBinding.selectorNeutral.setVisibility(View.INVISIBLE);
                break;
            case MoodUtilities.VERY_BAD_MOOD_ID:
                mBinding.selectorVeryBad.setVisibility(View.INVISIBLE);
                break;
            case MoodUtilities.VERY_GOOD_MOOD_ID:
                mBinding.selectorVeryGood.setVisibility(View.INVISIBLE);
                break;
        }
    }


    /**
     * This method saves the selected mood when a mood icon is clicked
     * and indicates on the UI which Mood was selected
     * by showing a selector shape around the selected mood icon.
     *
     * @param moodIcon: The mood icon that is clicked by the user
     */
    private void saveSelectedMood(View moodIcon) {
        int moodViewId = moodIcon.getId();

        switch (moodViewId) {
            case R.id.icon_bad:
                mSelectedMood = MoodUtilities.BAD_MOOD_ID;
                mBinding.selectorBad.setVisibility(View.VISIBLE);
                break;
            case R.id.icon_very_bad:
                mSelectedMood = MoodUtilities.VERY_BAD_MOOD_ID;
                mBinding.selectorVeryBad.setVisibility(View.VISIBLE);
                break;
            case R.id.icon_good:
                mSelectedMood = MoodUtilities.GOOD_MOOD_ID;
                mBinding.selectorGood.setVisibility(View.VISIBLE);
                break;
            case R.id.icon_very_good:
                mSelectedMood = MoodUtilities.VERY_GOOD_MOOD_ID;
                mBinding.selectorVeryGood.setVisibility(View.VISIBLE);
                break;
            case R.id.icon_neutral:
                mSelectedMood = MoodUtilities.NEUTRAL_MOOD_ID;
                mBinding.selectorNeutral.setVisibility(View.VISIBLE);
                break;
        }
    }
}
