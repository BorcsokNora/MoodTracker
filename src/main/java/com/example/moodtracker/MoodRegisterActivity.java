package com.example.moodtracker;

import android.app.Activity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.databinding.DataBindingUtil;
import android.preference.PreferenceManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.TextView;

import com.example.moodtracker.MoodDatabase.MoodDatabase;
import com.example.moodtracker.MoodDatabase.MoodEntry;
import com.example.moodtracker.Utilities.AppExecutors;
import com.example.moodtracker.Utilities.EditTextSoftKeyListener;
import com.example.moodtracker.Utilities.MoodUtilities;
import com.example.moodtracker.Utilities.UiUtilities;
import com.example.moodtracker.databinding.ActivityMoodRegisterBinding;


public class MoodRegisterActivity extends AppCompatActivity {

    //Todo: refactor code to use MoodEntry objects!

    public static final String TAG = MoodRegisterActivity.class.getName();

    // This variable stores the ID of the selected mood
    int mSelectedMood = 0;

    // This variable holds the notes added by the user to the actual day's mood
    String mMoodNotes = "";

    // This boolean shows if there are any notes added by the user that needs to be saved
    boolean mNotesAdded = false;

    // The instance of the data binding class
    // A binding class is autogenerated for each layout file.
    ActivityMoodRegisterBinding mBinding;

    // The instance of the default Shared Preferences
    SharedPreferences mSharedPreferences;

    // This listener is notified when a mood icon is clicked
    View.OnClickListener mMoodIconListener;

    // This listener is notified when the save button is clicked
    View.OnClickListener mSaveButtonListener;

    // This listener is notified when the save button is clicked
    View.OnClickListener mShowMoodHistoryButtonListener;

    // This variable holds the single instance of our database
    private MoodDatabase mMoodDatabase;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        SharedPreferences sharedPreferencesInstance = getSharedPreferenceInstance();

        // Initialize/get access to the data binding class
        mBinding = DataBindingUtil.setContentView(this, R.layout.activity_mood_register);

        // Extract the saved mood icon from SharedPreferences
        mSelectedMood = MoodUtilities.getSavedMoodFromSharedPreferences(this, TAG, sharedPreferencesInstance);

        // Display on the UI which mood was selected previously
        MoodUtilities.showSelectedMood(mSelectedMood, mBinding);

        // Show the notes field on the UI
        mBinding.editTextNotes.setVisibility(View.VISIBLE);

        // Extract the saved text from SharedPreferences and show it in the EditText field
        mMoodNotes = MoodUtilities.getSavedNotes(this, TAG, sharedPreferencesInstance);
        mBinding.editTextNotes.setText(mMoodNotes);

        mBinding.editTextNotes.setOnEditorActionListener(new EditTextSoftKeyListener(MoodRegisterActivity.this));


        // This listener is responsible to mark the selected mood
        mMoodIconListener = new View.OnClickListener() {
            @Override
            public void onClick(View moodIcon) {
                showIndicatorAroundMoodIcon(moodIcon);
            }
        };

        // This listener is responsible to invoke the save function when the user clicks on the save button
        mSaveButtonListener = new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                saveMoodOnClick(v);
            }
        };

        // This listener is responsible to invoke the mood history function when the user clicks on the show mood history button
        mShowMoodHistoryButtonListener = new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showMoodHistory();
            }
        };

        // Create (or get) the instance of the database
        // We need the application context to see if the db was already created by another activity
        // todo:  Database instance should be provided by ViewModel!!! - lsd: LiveData & ViewModel in FÃœZETBE
        mMoodDatabase = MoodDatabase.getDatabase(getApplicationContext());

        // set the listener on the mood icons so that it registers if an icon is clicked
        mBinding.iconBad.setOnClickListener(mMoodIconListener);
        mBinding.iconGood.setOnClickListener(mMoodIconListener);
        mBinding.iconNeutral.setOnClickListener(mMoodIconListener);
        mBinding.iconVeryBad.setOnClickListener(mMoodIconListener);
        mBinding.iconVeryGood.setOnClickListener(mMoodIconListener);

        // set the listeners on the buttons to invoke the functions when the user clicks on them.
        mBinding.modifySaveButton.setOnClickListener(mSaveButtonListener);
        mBinding.moodHistoryButton.setOnClickListener(mShowMoodHistoryButtonListener);

        // set a listener on the EditText field to know if there are any notes to be saved
        mBinding.editTextNotes.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mNotesAdded = true; // this boolean indicates that there might be some notes that we have to save.
            }
        });
    }

    /**
     * When the user presses the show mood history button, this method opens up a new activity to show the list of saved moods
     */
    public void showMoodHistory() {
        Intent i = new Intent(getApplicationContext(), MoodHistoryActivity.class);
        startActivity(i);

    }


    // todo: refactor code to remove the view parameter
    /**
     * When the user presses the save mood button, this method invokes the saveMoodOnClick method of MoodUtilities
     * to save the selected mood in SharedPreferences.
     *
     * @param view is the ButtonView pressed by the user. This parameter is not used in this method.
     */
    public void saveMoodOnClick(View view) {

        //todo refactor code to use db only and not SharedPreferences!! Or clean up sharedPreferences every day - so it doesn't show the lastly selected mood.

        if (mNotesAdded) {
            mMoodNotes = mBinding.editTextNotes.getText().toString();
        }

        MoodUtilities.saveMoodToSharedPreferences(this, mSelectedMood, mMoodNotes, getSharedPreferenceInstance());


        Long timeStampLong = System.currentTimeMillis();

        final MoodEntry dbEntry = new MoodEntry(mSelectedMood, timeStampLong, mMoodNotes);

        // Execute this method on a background thread, as database operation might take a long time thus blocking the UI
        AppExecutors.getInstance().diskIO().execute(new Runnable() {
            @Override
            public void run() {
                mMoodDatabase.moodDao().insertMoodEntry(dbEntry);
            }
        });
        showMoodHistory();
    }


    /**
     * This method shows an indicator around the selected mood icon
     *
     * @param moodIcon: the view that was clicked by the user
     */
    public void showIndicatorAroundMoodIcon(View moodIcon) {
        // Check if any mood was selected previously and clean up before saving the new mood state
        if (mSelectedMood != 0) {
            MoodUtilities.cleanUpSelectedMood(mSelectedMood, mBinding);
            mSelectedMood = 0;
        }

        // Register which mood was selected by the user
        mSelectedMood = MoodUtilities.registerSelectedMood(moodIcon);

        // and put a sign on the selected mood in the UI
        MoodUtilities.showSelectedMood(mSelectedMood, mBinding);
    }

    /**
     * This method gets (or initializes) mSharedPreferences to provide the default shared preferences
     *
     * @return mSharedPreferences: the default SharedPreferences
     */
    private SharedPreferences getSharedPreferenceInstance() {
        if (mSharedPreferences == null) {
            // Get the default shared preferences
            mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        }
        return mSharedPreferences;
    }

}