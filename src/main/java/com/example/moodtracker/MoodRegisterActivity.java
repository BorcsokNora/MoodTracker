package com.example.moodtracker;

import android.content.SharedPreferences;
import android.databinding.DataBindingUtil;
import android.preference.PreferenceManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;

import com.example.moodtracker.databinding.ActivityMoodRegisterBinding;


public class MoodRegisterActivity extends AppCompatActivity {

    public static final String TAG = MoodRegisterActivity.class.getName();

    // This variable stores the ID of the selected mood
    int mSelectedMood = 0;

    // The instance of the data binding class
    // A binding class is autogenerated for each layout file.
    ActivityMoodRegisterBinding mBinding;

    // The instance of the default Shared Preferences
    SharedPreferences mSharedPreferences;

    // This listener is notified when a mood icon is clicked
    View.OnClickListener mListener;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Initialize/get access to the data binding class
        mBinding = DataBindingUtil.setContentView(this, R.layout.activity_mood_register);

        // Extract the saved mood icon from SharedPreferences
        mSelectedMood = MoodUtilities.haveSavedMood(this, TAG, getSharedPreferenceInstance());

        MoodUtilities.showSelectedMood(mSelectedMood, mBinding);

        // When a mood is clicked the UI shows an indicator around the selected mood icon
        mListener = new View.OnClickListener() {
            @Override
            public void onClick(View moodIcon) {

                // Check if any mood was selected previously and clean up before saving the new mood state
                if (mSelectedMood != 0) {
                    MoodUtilities.cleanUpSelectedMood(mSelectedMood, mBinding);
                    mSelectedMood = 0;
                }

                // Register which mood was selected by the user
                mSelectedMood = MoodUtilities.registerSelectedMood(moodIcon);

                // and put a sign on the selected mood in the UI
                MoodUtilities.showSelectedMood(mSelectedMood, mBinding);
            }
        };

        // set the listener on the mood icons so that it registers if an icon is clicked
        mBinding.iconBad.setOnClickListener(mListener);
        mBinding.iconGood.setOnClickListener(mListener);
        mBinding.iconNeutral.setOnClickListener(mListener);
        mBinding.iconVeryBad.setOnClickListener(mListener);
        mBinding.iconVeryGood.setOnClickListener(mListener);
    }

    /**
     * When the user presses the save mood button, this method invokes the saveMood method of MoodUtilities
     * to save the selected mood in SharedPreferences.
     * @param view is the ButtonView pressed by the user. This parameter is not used in this method.
     */
    public void saveMood(View view) {
        MoodUtilities.saveMood(this, mSelectedMood, getSharedPreferenceInstance());
    }

    // Get the default shared preferences

    /**
     * This method gets (or initializes) mSharedPreferences to provide the default shared preferences
     * @return mSharedPreferences: the default SharedPreferences
     */
    private SharedPreferences getSharedPreferenceInstance(){
        if(mSharedPreferences == null){
            mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        }
        return mSharedPreferences;
    }
}
