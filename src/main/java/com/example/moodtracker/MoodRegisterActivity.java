package com.example.moodtracker;

import android.content.SharedPreferences;
import android.databinding.DataBindingUtil;
import android.preference.PreferenceManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Toast;

import com.example.moodtracker.databinding.ActivityMoodRegisterBinding;


public class MoodRegisterActivity extends AppCompatActivity {

    String TAG = "MoodRegisterActivity";

    // This variable stores the ID of the selected mood
    int mSelectedMood = 0;

    // The instance of the data binding class
    // A binding class is autogenerated for each layout file.
    ActivityMoodRegisterBinding mBinding;

    // This listener is notified when a mood icon is clicked
    View.OnClickListener mListener;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        mBinding = DataBindingUtil.setContentView(this, R.layout.activity_mood_register);

        // Extract the saved mood icon from SharedPreferences
        mSelectedMood = haveSavedMood();

        MoodUtilities.showSelectedMood(mSelectedMood, mBinding);

        // When a mood is clicked the UI shows an indicator around the selected mood icon
        mListener = new View.OnClickListener() {
            @Override
            public void onClick(View moodIcon) {

                // Check if any mood was selected previously and clean up before saving the new mood state
                if (mSelectedMood != 0) {
                    MoodUtilities.cleanUpSelectedMood(mSelectedMood, mBinding);
                    mSelectedMood = 0;
                }

                // Register which mood was selected by the user
                mSelectedMood = MoodUtilities.registerSelectedMood(moodIcon);

                // and put a sign on the selected mood in the UI
                MoodUtilities.showSelectedMood(mSelectedMood, mBinding);

                //Todo: put mSelectedMood to savedInstanceState OR save in shared preferences here? (or both?)

                Toast.makeText(MoodRegisterActivity.this, "Selected mood ID: " + mSelectedMood, Toast.LENGTH_SHORT).show();

                return;
            }
        };

        // set the listener on the mood icons so that it registers if an icon is clicked
        mBinding.iconBad.setOnClickListener(mListener);
        mBinding.iconGood.setOnClickListener(mListener);
        mBinding.iconNeutral.setOnClickListener(mListener);
        mBinding.iconVeryBad.setOnClickListener(mListener);
        mBinding.iconVeryGood.setOnClickListener(mListener);

    }




    /**
     * When the user presses the save mood button, this method saves the selected mood in SharedPreferences,
     * using the default SharedPreferences.
     *
     * @param view is the ButtonView pressed by the user. This parameter is not used in this method.
     */
    public void saveMood(View view) {
        // If no icon was selected, prompt the user to select a mood first.
        if (mSelectedMood == 0) {
            String message = getString(R.string.noMoodSelectedMessae);
            Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
            return;
        }

        // Save the selected mood in SharedPreferences
        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(this);
        SharedPreferences.Editor editor = sp.edit();
        editor.putInt(getString(R.string.selectedMoodPreferenceKey), mSelectedMood)
                //save the changes in the preferences
                // .apply() performs the update off the main thread
                .apply();
    }

    /**
     * This method extracts the int value of the saved mood from the shared preferences
     *
     * @return the int value of the saved mood
     * If there is no value saved in the shared preferences it returns 0.
     */
    private int haveSavedMood() {
        // todo: merge separate sharedPreference instances to mSharedPreference
        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(this);
        int savedMoodPref = 0;
        try {
            savedMoodPref = sp.getInt(getString(R.string.selectedMoodPreferenceKey), 0);
        } catch (Exception e) {
            Log.d(TAG, "haveSavedMood: extract savedMood from preference failed. " + e);
        }
        return savedMoodPref;
    }

}
