package com.example.moodtracker;

import android.content.Intent;
import android.content.SharedPreferences;
import android.databinding.DataBindingUtil;
import android.preference.PreferenceManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;

import java.util.List;

import com.example.moodtracker.MoodDatabase.DateConverter;
import com.example.moodtracker.MoodDatabase.MoodDatabase;
import com.example.moodtracker.MoodDatabase.MoodEntry;
import com.example.moodtracker.databinding.ActivityMoodRegisterBinding;


public class MoodRegisterActivity extends AppCompatActivity {

    //Todo: refactor code to use MoodEntry objects!

    public static final String TAG = MoodRegisterActivity.class.getName();

    // This variable stores the ID of the selected mood
    int mSelectedMood = 0;

    // This variable holds the notes added by the user to the actual day's mood
    String mMoodNotes = "";

    // This boolean shows if there are any notes added by the user that needs to be saved
    boolean mNotesAdded = false;

    // The instance of the data binding class
    // A binding class is autogenerated for each layout file.
    ActivityMoodRegisterBinding mBinding;

    // The instance of the default Shared Preferences
    SharedPreferences mSharedPreferences;

    // This listener is notified when a mood icon is clicked
    View.OnClickListener mListener;

    // This variable holds the single instance of our database
    private MoodDatabase mMoodDatabase;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        SharedPreferences sharedPreferencesInstance = getSharedPreferenceInstance();

        // Initialize/get access to the data binding class
        mBinding = DataBindingUtil.setContentView(this, R.layout.activity_mood_register);

        // Extract the saved mood icon from SharedPreferences
        mSelectedMood = MoodUtilities.getSavedMood(this, TAG, sharedPreferencesInstance);

        // Display on the UI which mood was selected previously
        MoodUtilities.showSelectedMood(mSelectedMood, mBinding);

        // Extract the saved text from SharedPreferences and show it in the EditText field
        mMoodNotes = MoodUtilities.getSavedNotes(this, TAG, sharedPreferencesInstance);
        mBinding.editTextNotes.setText(mMoodNotes);

        // When a mood is clicked the UI shows an indicator around the selected mood icon
        mListener = new View.OnClickListener() {
            @Override
            public void onClick(View moodIcon) {

                // Check if any mood was selected previously and clean up before saving the new mood state
                if (mSelectedMood != 0) {
                    MoodUtilities.cleanUpSelectedMood(mSelectedMood, mBinding);
                    mSelectedMood = 0;
                }

                // Register which mood was selected by the user
                mSelectedMood = MoodUtilities.registerSelectedMood(moodIcon);

                // and put a sign on the selected mood in the UI
                MoodUtilities.showSelectedMood(mSelectedMood, mBinding);
            }
        };

        // Create (or get) the instance of the database
        // We need the application context to see if the db was already created by another activity
        // todo:  Database instance should be provided by ViewModel!!! - lsd: LiveData & ViewModel in FÃœZETBE
        mMoodDatabase = MoodDatabase.getDatabase(getApplicationContext());

        // set the listener on the mood icons so that it registers if an icon is clicked
        mBinding.iconBad.setOnClickListener(mListener);
        mBinding.iconGood.setOnClickListener(mListener);
        mBinding.iconNeutral.setOnClickListener(mListener);
        mBinding.iconVeryBad.setOnClickListener(mListener);
        mBinding.iconVeryGood.setOnClickListener(mListener);

        // set a listener on the EditText field to know if there are any notes to be saved
        mBinding.editTextNotes.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mNotesAdded = true; // this boolean indicates that there might be some notes that we have to save.
            }
        });
    }

    /**
     * When the user presses the show mood history button, this method opens up a new activity to show the list of saved moods
     *
     * @param view is the ButtonView pressed by the user. This parameter is not used in this method.
     */
    public void showMoodHistory(View view) {
        Intent i = new Intent(getApplicationContext(), MoodHistoryActivity.class);
        startActivity(i);

    }

    /**
     * When the user presses the save mood button, this method invokes the saveMoodOnClick method of MoodUtilities
     * to save the selected mood in SharedPreferences.
     *
     * @param view is the ButtonView pressed by the user. This parameter is not used in this method.
     */
    public void saveMoodOnClick(View view) {
//todo refactor code to use db only and not SharedPreferences!! Or clean up sharedPreferences every day - so it doesn't show the lastly selected mood.
       if(mNotesAdded){

       }
        mMoodNotes = mBinding.editTextNotes.getText().toString();
        MoodUtilities.saveMood(this, mSelectedMood, mMoodNotes, getSharedPreferenceInstance());


        Long timeStampLong = System.currentTimeMillis();

        MoodEntry dbEntry = new MoodEntry(mSelectedMood, timeStampLong, mMoodNotes);
        mMoodDatabase.moodDao().insertMoodEntry(dbEntry);

        // todo delete this part - querying database only for testing if entries are saved:
        List<MoodEntry> moodEntryList = mMoodDatabase.moodDao().getMoodEntries();
        Log.d(TAG, "saveMoodOnClick method called. Database list details: " + parseMoodList(moodEntryList));
    }

    // Get the default shared preferences

    /**
     * This method gets (or initializes) mSharedPreferences to provide the default shared preferences
     *
     * @return mSharedPreferences: the default SharedPreferences
     */
    private SharedPreferences getSharedPreferenceInstance() {
        if (mSharedPreferences == null) {
            mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        }
        return mSharedPreferences;
    }

    // todo: refactor this method to show mood entries on the UI.

    // This method makes a list of the database entries in string format.
    // For the purpose of testing.
    // todo: check if this method is needed - if not, delete it!
    public String parseMoodList(List<MoodEntry> moodList) {

        int listItems = moodList.size();
        if (listItems > 0) {
            StringBuilder moodDetails = new StringBuilder();

            for (int i = 0; i < listItems; i++) {
                MoodEntry moodEntry = moodList.get(i);
                // get the Id of the database entry
                int moodEntryId = moodEntry.getEntryId();
                // get the mood of the entry in String format
                String moodString = MoodUtilities.getMoodString(moodEntry.getMoodId(), this);

                //get the timestamp of the entry and convert it to readable string format
                String timeOfEntry = DateConverter.timeStampToDateString(moodEntry.getTimeOfMood());

                // get the notes of the entry (if there is were no notes added, this will return "")
                String notes = moodEntry.getNotes();

                // create a string of the database entry
                String moodEntryString = "\n" + "ID: " + moodEntryId + ". Saved at this time: " + timeOfEntry + ". " + moodString + " mood. Notes added by the user: " + notes;
                moodDetails.append(moodEntryString);
            }
            // return the string containing the list of mood entry IDs and the corresponding moods.
            return moodDetails.toString();
        }
        // if there is no item it the list return null
        return null;
    }
}